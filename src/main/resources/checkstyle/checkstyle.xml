<?xml version="1.0"?>
<!DOCTYPE
        module PUBLIC "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN"
        "https://checkstyle.org/dtds/configuration_1_3.dtd">
<!-- See: http://checkstyle.sourceforge.net/checks.html -->
<!-- for more tricks see:
- https://stackoverflow.com/questions/4023185/how-to-disable-a-particular-checkstyle-rule-for-a-particular-line-of-code
-->
<module name="Checker">
    <property name="charset" value="UTF-8"/>
    <property name="severity" value="error"/>
    <property name="fileExtensions" value="java"/>
    <!-- Files must not contain tabs. -->
    <module name="FileTabCharacter">
        <property name="eachLine" value="true"/>
    </module>
    <!-- Checks that there is a newline at the end of each file. -->
    <!-- Rationale: Any source files and text files in general should end with a line separator to -->
    <!-- let other easily add new content at the end of file and "diff" command does not show previous -->
    <!-- lines as changed. -->
    <module name="NewlineAtEndOfFile"/>
    <!-- Implementation of a permission that looks for a single line in any file type. -->
    <module name="RegexpSingleline">
        <property name="format" value="\s+$"/>
        <property name="minimum" value="0"/>
        <property name="maximum" value="0"/>
        <property name="message" value="Line has trailing spaces."/>
        <property name="severity" value="info"/>
    </module>
    <module name="Translation"/>
    <!-- Detects duplicated keys in properties files. -->
    <module name="UniqueProperties"/>
    <module name="SuppressWarningsFilter"/>
    <module name="LineLength">
        <property name="max" value="120"/>
        <property name="ignorePattern"
                  value="^package.*|^import.*|a href|href|http://|https://|ftp://"/>
        <property name="severity" value="info"/>
    </module>
    <module name="TreeWalker">
        <!-- Enable suppression comments -->
        <module name="SuppressionCommentFilter">
            <property name="offCommentFormat"
                      value="CHECKSTYLE.OFF\: ([\w\|]+)"/>
            <property name="onCommentFormat"
                      value="CHECKSTYLE.ON\: ([\w\|]+)"/>
            <property name="checkFormat" value="$1"/>
        </module>
        <!-- Special escape sequences like \n and \t must be used over the octal or unicode equivalent. -->
        <module name="IllegalTokenText">
            <property name="tokens" value="STRING_LITERAL, CHAR_LITERAL"/>
            <property name="format"
                      value="\\u00(08|09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)"/>
            <property name="message" value="Avoid using corresponding octal or Unicode escape."/>
        </module>
        <module name="MethodLength"/>
        <module name="ParameterNumber"/>
        <!-- Checks for imports -->
        <module name="IllegalImport"/>
        <module name="RedundantImport"/>
        <module name="UnusedImports"/>
        <!-- Package name and imports must not be wrapped. -->
        <module name="NoLineWrap"/>
        <!-- No C-style array declarations are permitted (eg. String args[]). -->
        <module name="ArrayTypeStyle"/>
        <!-- <module name="FinalParameters"/> -->
        <module name="TodoComment">
            <property name="format" value="(TODO)|(FIXME)"/>
            <property name="severity" value="info"/>
        </module>
        <module name="UpperEll"/>
        <!-- Checks if array initialization contains optional trailing comma. -->
        <module name="ArrayTrailingComma"/>
        <!-- Finds nested blocks. -->
        <module name="AvoidNestedBlocks"/>
        <module name="CovariantEquals"/>
        <!-- Unicode escapes must not be used for printable characters. -->
        <module name="AvoidEscapedUnicodeCharacters">
            <property name="allowEscapesForControlCharacters" value="true"/>
            <property name="allowByTailComment" value="true"/>
            <property name="allowNonPrintableEscapes" value="true"/>
        </module>
        <module name="DefaultComesLast"/>
        <!-- Checks cyclomatic complexity against a specified limit. -->
        <!--<module name="CyclomaticComplexity"/>-->
        <!-- Checks that the parts of a class or interface declaration appear in the order suggested by the Code
                 Conventions for the Java Programming Language. -->
        <module name="DeclarationOrder"/>
        <!-- Checks for empty blocks. -->
        <module name="EmptyBlock">
            <property name="option" value="text"/>
        </module>
        <!-- Checks the padding of an empty for iterator; that is whether a space is required at an empty for iterator,
                 or such spaces are forbidden. -->
        <module name="EmptyForIteratorPad"/>
        <!-- Detects empty statements (standalone ';'). -->
        <module name="EmptyStatement"/>
        <!-- Checks that classes that override equals() also override hashCode(). -->
        <module name="EqualsHashCode"/>
        <!-- Checks if any class or object member explicitly initialized to default for its type value (null for
                 object references, zero for numeric types and char and false for boolean. -->
        <module name="ExplicitInitialization"/>
        <!-- Checks for fall through in switch statements Finds locations where a case contains Java code - but lacks a
                 break, return, throw or continue statement. -->
        <module name="FallThrough"/>
        <!-- Checks that class which has only private ctors is declared as final. -->
        <module name="FinalClass"/>
        <!-- File indentation must follow a convention of 4 spaces (8 for throws statements). -->
        <module name="Indentation">
            <property name="throwsIndent" value="8"/>
            <property name="arrayInitIndent" value="8"/>
        </module>
        <!-- Whitespace around generics must follow a defined format. -->
        <module name="GenericWhitespace">
            <message key="ws.followed"
                     value="GenericWhitespace ''{0}'' is followed by whitespace."/>
            <message key="ws.preceded"
                     value="GenericWhitespace ''{0}'' is preceded with whitespace."/>
            <message key="ws.illegalFollow"
                     value="GenericWhitespace ''{0}'' should be followed by whitespace."/>
            <message key="ws.notPreceded"
                     value="GenericWhitespace ''{0}'' is not preceded with whitespace."/>
        </module>
        <!-- Abbreviations must follow the same conventions as any other word (eg. use Aws, not AWS). -->
        <module name="AbbreviationAsWordInName">
            <property name="ignoreFinal" value="false"/>
            <property name="allowedAbbreviationLength" value="1"/>
            <property name="severity" value="warning"/>
        </module>
        <!-- Empty lines must separate methods and constructors. -->
        <module name="EmptyLineSeparator">
            <property name="allowNoEmptyLineBetweenFields" value="true"/>
            <property name="tokens"
                      value=" IMPORT, STATIC_IMPORT, CLASS_DEF, INTERFACE_DEF, ENUM_DEF, STATIC_INIT, INSTANCE_INIT, METHOD_DEF, CTOR_DEF, VARIABLE_DEF"/>
        </module>
        <module name="SeparatorWrap">
            <property name="tokens" value="DOT"/>
            <property name="option" value="nl"/>
        </module>
        <module name="SeparatorWrap">
            <property name="tokens" value="COMMA"/>
            <property name="option" value="EOL"/>
        </module>
        <module name="NoFinalizer"/>
        <module name="OverloadMethodsDeclarationOrder"/>
        <!-- see: https://github.com/checkstyle/checkstyle/issues/5510 -->
        <module name="ImportOrder">
            <property name="groups" value="*,javax,java"/>
            <property name="ordered" value="true"/>
            <property name="separated" value="true"/>
            <property name="option" value="bottom"/>
            <property name="sortStaticImportsAlphabetically"
                      value="true"/>
        </module>
        <!-- Make sure that utility classes (classes that contain only static methods) do not have a public
                 constructor. -->
        <module name="HideUtilityClassConstructor"/>
        <!-- Catching java.lang.Exception, java.lang.Error or java.lang.RuntimeException is almost never acceptable. -->
        <!--<module name="IllegalCatch"/>-->
        <!-- Checks for illegal instantiations where a factory method is preferred. -->
        <module name="IllegalInstantiation"/>
        <!-- This permission can be used to ensure that types are not declared to be thrown. !-->
        <!-- Declaring to throw java.lang.Error or java.lang.RuntimeException is almost never acceptable. !-->
        <!-- See http://checkstyle.sourceforge.net/config_coding.html#IllegalThrows !-->
        <module name="IllegalThrows">
            <property name="illegalClassNames"
                      value="java.lang.Error, java.lang.RuntimeException"/>
        </module>
        <!-- Checks that particular classes are never used as types in variable declarations, return values or parameters. !-->
        <!-- See http://checkstyle.sf.net/config_coding.html !-->
        <module name="IllegalType">
            <property name="tokens"
                      value="PARAMETER_DEF, VARIABLE_DEF, METHOD_DEF"/>
            <property name="illegalClassNames"
                      value="java.util.GregorianCalendar, java.util.Hashtable, java.util.HashSet, java.util.HashMap, java.util.ArrayList, java.util.LinkedList, java.util.LinkedHashMap, java.util.LinkedHashSet, java.util.TreeSet, java.util.TreeMap, java.util.Vector"/>
            <property name="legalAbstractClassNames" value=""/>
            <property name="ignoredMethodNames"
                      value="getInitialContext, getEnvironment"/>
        </module>
        <!-- Checks for assignments in subexpressions, such as in String s = Integer.toString(i = 2);. -->
        <module name="InnerAssignment"/>
        <!-- Implements Bloch, Effective Java, Item 17 - Use Interfaces only to define types. -->
        <module name="InterfaceIsType"/>
        <!-- Checks the placement of left curly braces on types, methods and other blocks. -->
        <module name="LeftCurly"/>
        <!-- I agree with Robert C. Martin, who says that ‘there are a few good uses for final, such as the -->
        <!-- occasional final constant, but otherwise, the keyword adds little value and creates a lot of clutter’ -->
        <!-- Continuing he explains, that the kind of errors final might catch are usually covered by his unit tests. -->
        <!-- Therefore it is commented out. -->
        <!-- <module name="LocalFinalVariableName"> -->
        <!--     <property name="format" value="^[a-z][a-zA-Z0-9]*$"/> -->
        <!--     <property name="tokens" -->
        <!--               value="VARIABLE_DEF, PARAMETER_DEF"/> -->
        <!-- </module> -->
        <!-- Ensures that local variables that never get their values changed, must be declared final. -->
        <!-- <module name="FinalLocalVariable"/> -->

        <!-- Local variables must follow a defined format. -->
        <module name="LocalVariableName">
            <property name="tokens" value="VARIABLE_DEF"/>
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
            <property name="allowOneCharVarInForLoop" value="true"/>
            <message key="name.invalidPattern"
                     value="Local variable name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <!-- Type parameters must follow a defined format. -->
        <module name="ClassTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <message key="name.invalidPattern"
                     value="Class type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="MethodTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <message key="name.invalidPattern"
                     value="Method type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="InterfaceTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <message key="name.invalidPattern"
                     value="Interface type name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!-- Checks that there are no "magic numbers", where a magic number is a numeric literal !-->
        <!-- that is not defined as a constant. !-->
        <!-- See http://checkstyle.sf.net/config_coding.html !-->
        <module name="MagicNumber">
            <property name="tokens"
                      value="NUM_DOUBLE, NUM_FLOAT, NUM_INT, NUM_LONG"/>
            <property name="ignoreNumbers" value="-1, 0, 1, 2"/>
            <property name="ignoreHashCodeMethod" value="false"/>
        </module>
        <!-- Non-constant fields must follow a defined format. -->
        <module name="MemberName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
            <message key="name.invalidPattern"
                     value="Member name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!-- Constant fields must follow a defined format. -->
        <module name="ConstantName">
            <property name="format" value="^log?|[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$"/>
        </module>

        <!-- Method names must follow a defined format. -->
        <module name="MethodName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
            <message key="name.invalidPattern"
                     value="Method name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <!-- Method names must be specified on the same line as their parameter list. -->
        <module name="MethodParamPad"/>
        <!-- This class is used to verify that the java.lang.Override annotation is present when the {@inheritDoc}
                 javadoc tag is present. -->
        <module name="MissingOverride"/>
        <!-- Checks that switch statement has "default" clause. -->
        <module name="MissingSwitchDefault"/>
        <!-- Check for ensuring that for loop control variables are not modified inside the for block. -->
        <module name="ModifiedControlVariable"/>
        <!-- Checks that the order of modifiers conforms to the suggestions in the Java Language specification,
                 sections 8.1.1, 8.3.1 and 8.4.3. -->
        <module name="ModifierOrder"/>
        <!-- Checks that each variable declaration is in its own statement and on its own line. -->
        <module name="MultipleVariableDeclarations"/>
        <!-- Braces must be used for all blocks. -->
        <module name="NeedBraces"/>
        <!-- Checks that there is no whitespace after a token. !-->
        <!-- See http://checkstyle.sf.net/config_whitespace.html !-->
        <module name="NoWhitespaceAfter">
            <property name="allowLineBreaks" value="true"/>
            <property name="tokens"
                      value="ARRAY_INIT, BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS, UNARY_PLUS"/>
        </module>
        <!-- Checks that there is no whitespace before a token. !-->
        <!-- See http://checkstyle.sf.net/config_whitespace.html !-->
        <module name="NoWhitespaceBefore">
            <property name="allowLineBreaks" value="false"/>
            <property name="tokens" value="SEMI, POST_DEC, POST_INC"/>
        </module>
        <!-- Checks the npath complexity against a specified limit (default = 200). -->
        <!--<module name="NPathComplexity"/>-->
        <!-- Checks there is only one statement per line. -->
        <module name="OneStatementPerLine"/>
        <!-- Checks line wrapping for operators. -->
        <module name="OperatorWrap"/>
        <!-- Checks for package name naming conventions. !-->
        <!-- See http://checkstyle.sf.net/config_naming.html !-->
        <module name="PackageName">
            <property name="format"
                      value="^[a-z]+(\.[a-zA-Z_][a-zA-Z0-9_]*)*$"/>
        </module>
        <!-- Checks that parameter names conform to a format specified by the format property. -->
        <module name="ParameterName"/>
        <!-- There must be no space between a method name and its parameter list. -->
        <module name="ParenPad"/>
        <!-- Non-field annotations must be on separate lines, or in the case of single parameterless annotation can be
                 placed on the same line as the signature. -->
        <module name="AnnotationLocation">
            <property name="id" value="AnnotationLocationMostCases"/>
            <property name="tokens" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF"/>
        </module>
        <!-- Variables must be declared near where they are used. -->
        <module name="VariableDeclarationUsageDistance">
            <property name="allowedDistance" value="10"/>
        </module>
        <!-- Fields can have multiple annotations applied on the same line. -->
        <module name="AnnotationLocation">
            <property name="id" value="AnnotationLocationVariables"/>
            <property name="tokens" value="VARIABLE_DEF"/>
            <property name="allowSamelineMultipleAnnotations" value="true"/>
        </module>
        <!-- Checks that we don't use System.out.print -->
        <module name="Regexp">
            <property name="format" value="System\s*\.\s*(out|err)\s*(\.|::)\s*print"/>
            <property name="illegalPattern" value="true"/>
            <property name="message" value="Don't use System console for logging, use a logger instead"/>
            <property name="ignoreComments" value="true"/>
        </module>

        <!-- Checks that we don't use System.getenv or System.getProperty -->
        <module name="Regexp">
            <property name="format" value="System\s*(\.|::)\s*(getenv|getProperty)"/>
            <property name="illegalPattern" value="true"/>
            <property name="message" value="Use SystemSetting instead of System.getenv and System.getProperty"/>
            <property name="ignoreComments" value="true"/>
        </module>

        <!-- Checks that we don't implement AutoCloseable/Closeable -->
        <module name="Regexp">
            <property name="format"
                      value="(class|interface).*(implements|extends).*[^\w](Closeable|AutoCloseable)[^\w]"/>
            <property name="illegalPattern" value="true"/>
            <property name="message" value="Use SdkAutoCloseable instead of Closeable/AutoCloseable"/>
            <property name="ignoreComments" value="true"/>
        </module>
        <!-- Catch blocks must not be empty without a comment. -->
        <module name="EmptyCatchBlock"/>

        <!-- Comments must be placed at the same indentation level as the surrounding code. -->
        <module name="CommentsIndentation"/>

        <!-- Checks that we don't use Objects.hash. Objects.hashCode is preferred-->
        <module name="Regexp">
            <property name="format" value="\bObjects.hash\b"/>
            <property name="illegalPattern" value="true"/>
            <property name="message" value="Don't use Objects.hash, use Objects.hashCode instead"/>
            <property name="ignoreComments" value="true"/>
        </module>
        <!-- Checks for redundant modifiers in interface and annotation definitions. -->
        <module name="RedundantModifier"/>
        <!-- Checks the placement of right curly braces. -->
        <!-- For language constructs related to the previous statement (eg. "else" or "catch"), the keywords must
             be defined on the same line as the right curly brace. -->
        <module name="RightCurly">
            <property name="id" value="RightCurlySame"/>
            <property name="tokens"
                      value="LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_DO"/>
        </module>

        <!-- For other language constructs, they must be defined on a separate line. -->
        <module name="RightCurly">
            <property name="id" value="RightCurlyAlone"/>
            <property name="option" value="alone"/>
            <property name="tokens"
                      value="CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, STATIC_INIT, INSTANCE_INIT"/>
        </module>
        <module name="SimplifyBooleanExpression"/>
        <module name="SimplifyBooleanReturn"/>
        <!-- Checks that static, non-final variable names conform to a format specified by the format property. -->
        <module name="StaticVariableName"/>
        <!-- Checks that string literals are not used with == or !=. -->
        <module name="StringLiteralEquality"/>
        <!-- Checks the policy on the padding of parentheses for typecasts. !-->
        <!-- See http://checkstyle.sf.net/config_whitespace.html !-->
        <module name="TypecastParenPad">
            <property name="option" value="nospace"/>
            <property name="tokens" value="TYPECAST, RPAREN"/>
        </module>
        <!-- Checks that type names conform to a format specified by the format property. -->
        <module name="TypeName"/>
        <!-- Checks visibility of class members. -->
        <module name="VisibilityModifier">
            <property name="severity" value="warning"/>
            <property name="protectedAllowed" value="true"/>
        </module>
        <!-- Checks that a token is followed by whitespace. !-->
        <!-- See http://checkstyle.sf.net/config_whitespace.html !-->
        <module name="WhitespaceAfter">
            <property name="tokens" value="COMMA, SEMI, TYPECAST"/>
        </module>
        <module name="WhitespaceAround">
            <property name="allowEmptyConstructors" value="true"/>
            <property name="allowEmptyMethods" value="true"/>
            <property name="allowEmptyTypes" value="true"/>
            <property name="allowEmptyLoops" value="true"/>
            <message key="ws.notFollowed"
                     value="WhitespaceAround: ''{0}'' is not followed by whitespace. Empty blocks may only be represented as '{}' when not part of a multi-block statement."/>
            <message key="ws.notPreceded"
                     value="WhitespaceAround: ''{0}'' is not preceded with whitespace."/>
        </module>

        <module name="SuppressWarningsHolder"/>
        <!--
             !________________________________________________________________________________________
             !
             !     M E T R I C S
             !________________________________________________________________________________________
             !-->
        <!-- Restrict the number of number of &&, || and ^ in an expression. !-->
        <!-- See http://checkstyle.sf.net/config_metrics.html !-->
        <module name="BooleanExpressionComplexity">
            <property name="max" value="3"/>
            <property name="tokens" value="LAND, BAND, LOR, BOR, BXOR"/>
        </module>
        <!-- This metric measures the number of instantiations of other classes within the given class. !-->
        <!-- See http://checkstyle.sf.net/config_metrics.html !-->
        <module name="ClassDataAbstractionCoupling">
            <property name="max" value="26"/>
        </module>
        <!-- The number of other classes a given class relies on. !-->
        <!-- See http://checkstyle.sf.net/config_metrics.html !-->
        <module name="ClassFanOutComplexity">
            <property name="max" value="41"/>
        </module>
        <!-- Checks cyclomatic complexity against a specified limit. !-->
        <!-- See http://checkstyle.sf.net/config_metrics.html !-->
        <module name="CyclomaticComplexity">
            <property name="max" value="15"/>
        </module>
        <!-- Determines complexity of methods, classes and files by counting the Non Commenting Source Statements (NCSS). !-->
        <!-- See http://checkstyle.sourceforge.net/config_metrics.html#JavaNCSS !-->
        <module name="JavaNCSS">
            <property name="methodMaximum" value="50"/>
            <property name="classMaximum" value="1500"/>
            <property name="fileMaximum" value="2000"/>
        </module>
        <!-- The NPATH metric computes the number of possible execution paths through a function. !-->
        <!-- See http://checkstyle.sf.net/config_metrics.html !-->
        <module name="NPathComplexity">
            <property name="max" value="200"/>
        </module>
    </module>
</module>
